import java.util.Scanner;
import java.awt.Point;
public class o17
{
	public static int f( Point v12 , Point v23)
	{
	   int innerProduct = v12.x * v23.x + v12.y * v23.y;//內積的計算
	   return innerProduct;
	}
	public static void main(String[] args)
	{
	    Scanner cin = new Scanner(System.in);
	    int n = cin.nextInt();
	    int array[][] = new int[n+1][2];
	    array[0][0] = 0;
	    array[0][1] = 0;
	    for(int i=1;i<=n;i++)
	    {
            array[i][0] = cin.nextInt();
            array[i][1] = cin.nextInt();
        }
        int leftcount = 0;
        int rightcount = 0;
        int linecount = 0;
	    for(int i=1;i<n;i++)
	    {	    	
	    	Point p1 = new Point(array[i-1][0] , array[i-1][1]);
	    	Point p2 = new Point(array[i][0] , array[i][1]);
            Point p3 = new Point(array[i+1][0] ,array[i+1][1]);
            Point v12 = new Point(p2.x - p1.x , p2.y - p1.y);
            Point v23 = new Point(p3.x - p2.x , p3.y - p2.y);
	        int z = v12.x * v23.y  - v12.y * v23.x;//外積的計算
	        if(z > 0) //左轉
	        {
	           leftcount++;
	        }
	        else if(z < 0) //右轉
	        {
	           rightcount++;
	        }
	        else if(z==0) //平行(包含同向、垂直和反向)
	        {
	             int a = f(v12, v23);
	             if(a > 0) //直線前進 = 平行 + 同向
	             {
	        	    continue;
	             }
	             else if(a ==0)//(平行 + 垂直)不可能只是預防發生             
	             {
	                continue;
	             }
	             else //U轉 = 平行 + 反向
	             {
					linecount++;
				 }           
	        }
	    }
	    System.out.println(leftcount + " " + rightcount + " " + linecount);
	    cin.close();
	}
}
